// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id                 String              @id @default(uuid())
  name               String
  hciCode            String?             @unique @map("hci_code")  // Healthcare Institution Code
  registrationNumber String?             @unique @map("registration_number")
  address            String?
  phone              String?
  email              String?
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  
  users              User[]              // Keep for backward compatibility (primary clinic)
  doctorClinics      DoctorClinic[]      // Many-to-many with doctors
  submissions        MedicalSubmission[]

  @@map("clinics")
}

model User {
  id                  String              @id @default(uuid())
  clinicId            String              @map("clinic_id")  // Primary clinic for users
  email               String              @unique
  passwordHash        String              @map("password_hash")
  name                String
  role                UserRole
  mcrNumber           String?             @unique @map("mcr_number")  // Medical Council Registration Number (doctors only)
  status              UserStatus          @default(active)
  defaultDoctorId     String?             @map("default_doctor_id")
  lastLoginAt         DateTime?           @map("last_login_at")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  
  clinic              Clinic              @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctorClinics       DoctorClinic[]      // Many-to-many with clinics (doctors only)
  defaultDoctor       User?               @relation("DefaultDoctor", fields: [defaultDoctorId], references: [id], onDelete: SetNull)
  nursesUsingAsDefault User[]             @relation("DefaultDoctor")
  createdSubmissions  MedicalSubmission[] @relation("CreatedBy")
  approvedSubmissions MedicalSubmission[] @relation("ApprovedBy")
  assignedSubmissions MedicalSubmission[] @relation("AssignedDoctor")
  auditLogs           AuditLog[]

  @@index([clinicId])
  @@index([email])
  @@index([defaultDoctorId])
  @@map("users")
}

// Junction table for many-to-many relationship between doctors and clinics
model DoctorClinic {
  id        String   @id @default(uuid())
  doctorId  String   @map("doctor_id")
  clinicId  String   @map("clinic_id")
  isPrimary Boolean  @default(false) @map("is_primary")  // Indicates if this is the doctor's primary clinic
  createdAt DateTime @default(now()) @map("created_at")
  
  doctor    User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@unique([doctorId, clinicId])
  @@index([doctorId])
  @@index([clinicId])
  @@map("doctor_clinics")
}

model MedicalSubmission {
  id               String            @id @default(uuid())
  clinicId         String            @map("clinic_id")
  createdById      String            @map("created_by")
  approvedById     String?           @map("approved_by")
  assignedDoctorId String?           @map("assigned_doctor_id")
  examType         ExamType          @map("exam_type")
  patientName      String            @map("patient_name")
  patientNric      String            @map("patient_nric")
  patientDob       DateTime          @map("patient_dob") @db.Date
  examinationDate  DateTime?         @map("examination_date") @db.Date
  status           SubmissionStatus  @default(draft)
  formData         Json              @map("form_data")
  createdDate      DateTime          @default(now()) @map("created_date")
  submittedDate    DateTime?         @map("submitted_date")
  approvedDate     DateTime?         @map("approved_date")
  rejectedReason   String?           @map("rejected_reason")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  
  clinic           Clinic            @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  createdBy        User              @relation("CreatedBy", fields: [createdById], references: [id])
  approvedBy       User?             @relation("ApprovedBy", fields: [approvedById], references: [id])
  assignedDoctor   User?             @relation("AssignedDoctor", fields: [assignedDoctorId], references: [id])
  auditLogs        AuditLog[]

  @@index([clinicId])
  @@index([createdById])
  @@index([status])
  @@index([patientNric])
  @@index([examType])
  @@index([createdDate(sort: Desc)])
  @@map("medical_submissions")
}

model AuditLog {
  id            String    @id @default(uuid())
  submissionId  String    @map("submission_id")
  userId        String    @map("user_id")
  eventType     EventType @map("event_type")
  changes       Json?
  ipAddress     String?   @map("ip_address")
  userAgent     String?   @map("user_agent")
  timestamp     DateTime  @default(now())
  
  submission    MedicalSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id])

  @@index([submissionId])
  @@index([timestamp(sort: Desc)])
  @@map("audit_logs")
}

enum UserRole {
  doctor
  nurse
  admin
}

enum UserStatus {
  active
  inactive
}

enum ExamType {
  SIX_MONTHLY_MDW @map("Six-monthly Medical Exam for Migrant Domestic Workers (MOM)")
  WORK_PERMIT     @map("Full Medical Exam for Work Permit (MOM)")
  AGED_DRIVERS    @map("Medical Exam for Aged Drivers (SPF)")
}

enum SubmissionStatus {
  draft
  pending_approval
  submitted
  rejected
}

enum EventType {
  created
  updated
  submitted
  approved
  rejected
  deleted
}
